prop.table(table(loan$ChargedOff))
loan_var_name = c("CreditGrade", "Term", "BorrowerAPR", "ProsperRating..Alpha.", "ProsperScore", "ListingCategory..numeric.", "EmploymentStatus", "IsBorrowerHomeowner", "CurrentCreditLines", "OpenCreditLines", "TotalCreditLinespast7years", "OpenRevolvingAccounts", "OpenRevolvingMonthlyPayment","InquiriesLast6Months", "TotalInquiries", "CurrentDelinquencies", "AmountDelinquent", "DelinquenciesLast7Years", "PublicRecordsLast10Years","PublicRecordsLast12Months", "RevolvingCreditBalance","BankcardUtilization", "AvailableBankcardCredit","TotalTrades", "TradesNeverDelinquent..percentage.","TradesOpenedLast6Months", "DebtToIncomeRatio", "IncomeRange", "IncomeVerifiable", "TotalProsperLoans", "ProsperPrincipalBorrowed", "ScorexChangeAtTimeOfListing", "Recommendations", "InvestmentFromFriendsCount","InvestmentFromFriendsAmount","Investors","ChargedOff", "AverageCreditScore","CreditScoreRangeLower","CreditScoreRangeUpper","StatedMonthlyIncome", "ProsperPaymentsLessThanOneMonthLate", "ProsperPaymentsOneMonthPlusLate", "ProsperPrincipalOutstanding")
loan = loan[,loan_var_name]
rm(loan_var_name)
# find vector variables, print their names and number of levels
findFactor = function(loan){
for (n in names(loan)){
if (is.factor(loan[[n]]) == TRUE){
print(paste(n,length(levels(loan[[n]])),'levels'))
}
}
}
findFactor(loan)
loan_var_name = c("CreditGrade", "Term", "BorrowerAPR", "ProsperRating..Alpha.", "ProsperScore", "ListingCategory..numeric.", "EmploymentStatus", "IsBorrowerHomeowner", "CurrentCreditLines", "OpenCreditLines", "TotalCreditLinespast7years", "OpenRevolvingAccounts", "OpenRevolvingMonthlyPayment","InquiriesLast6Months", "TotalInquiries", "CurrentDelinquencies", "AmountDelinquent", "DelinquenciesLast7Years", "PublicRecordsLast10Years","PublicRecordsLast12Months", "RevolvingCreditBalance","BankcardUtilization", "AvailableBankcardCredit","TotalTrades", "TradesNeverDelinquent..percentage.","TradesOpenedLast6Months", "DebtToIncomeRatio", "IncomeRange", "IncomeVerifiable", "TotalProsperLoans", "ProsperPrincipalBorrowed", "ScorexChangeAtTimeOfListing", "Recommendations", "InvestmentFromFriendsCount","InvestmentFromFriendsAmount","Investors","ChargedOff", "AverageCreditScore","CreditScoreRangeLower","CreditScoreRangeUpper","StatedMonthlyIncome", "ProsperPaymentsLessThanOneMonthLate", "ProsperPaymentsOneMonthPlusLate", "ProsperPrincipalOutstanding")
loan = loan[,loan_var_name]
rm(loan_var_name)
# Clean up loan data to remove and impute NAs
# Replace missing values in Propsper rating alpha with values from credit grade.
# Before 2009, credit grade is used as a rating metric for loans posted on Prosper. Grades include AA, A, B, C, D, E, HR, and NC. Grade "NC" is used for borrowers with no credit history. After 2009, because of lack of interest from investors in "NC" loans, the grades are adjusted to exclude "NC", with the ranges of credit score for grade "HR" and "E" changed to reflect the new grade scale. No changes are made to other grades. Therefore, it is appropriate to combine these credit grades with the grades from the new Prosper rating to create a cohesive rating variable, with the exclusion of grade "NC".
loan = loan[as.character(loan$CreditGrade) != "NC",]
n = which(as.character(loan$CreditGrade) != "")
loan$ProsperRating..Alpha.[n] = loan$CreditGrade[n]
loan = loan[is.na(loan$ProsperRating..Alpha.) == FALSE,]
loan = loan[loan$ProsperRating..Alpha. != "",]
loan$ProsperRating..Alpha. = droplevels(loan$ProsperRating..Alpha.)
n = which(names(loan) == "CreditGrade")
loan = loan[,-n]
# Remove loans with NAs in Borrower APR feature, since there are just a few of these loans.
loan = loan[is.na(loan$BorrowerAPR) == FALSE,]
loan = loan[is.na(loan$TotalCreditLinespast7years) == FALSE,]
loan = loan[is.na(loan$TotalInquiries) == FALSE,]
loan = loan[is.na(loan$DelinquenciesLast7Years) == FALSE,]
loan = loan[is.na(loan$CurrentCreditLines) == FALSE,]
loan = loan[is.na(loan$OpenCreditLines) == FALSE,]
# Combine loans with no employment status to "other" category
loan$EmploymentStatus[as.character(loan$EmploymentStatus) == ""] = "Other"
loan$EmploymentStatus = droplevels(loan$EmploymentStatus)
# Mean impute several numeric variables
meanImpute = function(namelist,loan) {
for (name in namelist) {
n = round(mean(as.numeric(loan[,name]), na.rm = T))
loan[,name][is.na(loan[,name]) == TRUE] = n
}
loan
}
namelist = c("AmountDelinquent", "PublicRecordsLast12Months", "RevolvingCreditBalance", "BankcardUtilization", "AvailableBankcardCredit", "TotalTrades", "TradesNeverDelinquent..percentage.", "TradesOpenedLast6Months", "TotalProsperLoans", "TotalProsperLoans", "ProsperPrincipalBorrowed", "ScorexChangeAtTimeOfListing")
loan = meanImpute(namelist,loan)
# Impute debt-to-income ratio using simple revolving monthly payment/monthly income
n = which(is.na(loan$DebtToIncomeRatio) == TRUE)
loan$DebtToIncomeRatio[n] = loan$OpenRevolvingMonthlyPayment[n]/loan$StatedMonthlyIncome[n]
# Since it doesn't make sense to assess the default risk of borrowers that have no income at all, I will exclude information from these borrowers
loan = loan[loan$StatedMonthlyIncome >= 1,]
loan$IncomeRange = droplevels(loan$IncomeRange)
# Audit income range variable
auditIncomeRange = function(loan){
loan$IncomeRange = as.character(loan$IncomeRange)
condition = loan$IncomeRange == "Not displayed"
yearlyIncome = round(as.numeric(loan$StatedMonthlyIncome[condition])*12)
n = which(yearlyIncome <= 24999)
loan$IncomeRange[condition][n] = "$1-24,999"
n = which((yearlyIncome >= 25000) & (yearlyIncome <= 49999))
loan$IncomeRange[condition][n] = "$25,000-49,999"
n = which((yearlyIncome >= 50000) & (yearlyIncome <= 74999))
loan$IncomeRange[condition][n] = "$50,000-74,999"
n = which((yearlyIncome >= 75000) & (yearlyIncome <= 99999))
loan$IncomeRange[condition][n] = "$75,000-99,999"
n = which(yearlyIncome >= 100000)
loan$IncomeRange[condition][n] = "$100,000+"
loan$IncomeRange = factor(loan$IncomeRange)
}
# In order to cut down the number of samples and to be able to utilize more features in my model, I will only consider loans that have prior history with Prosper.
loan = loan[round(loan$TotalProsperLoans) > 0,]
loan = loan[round(loan$ProsperPrincipalBorrowed) > 0,]
# Any NAs in late payment or Prosper outstanding principal will be replaced with 0. This is because most borrowers on Prosper do not pay late and have no principal outstanding with Prosper.
loan$ProsperPaymentsLessThanOneMonthLate[is.na(loan$ProsperPaymentsLessThanOneMonthLate) == TRUE] = 0
loan$ProsperPaymentsOneMonthPlusLate[is.na(loan$ProsperPaymentsOneMonthPlusLate) == TRUE] = 0
loan$ProsperPrincipalOutstanding[is.na(loan$ProsperPrincipalOutstanding) == TRUE] = 0
# Conduct regression tree to fill in missing Prosper Score, attempt to replicate original Prosper Score assignment model. Source: https://www.prosper.com/help/topics/general-prosper_score/
test = loan[is.na(loan$ProsperScore) == TRUE,]
score_tree = rpart(data=loan,formula = ProsperScore ~ TotalInquiries + DelinquenciesLast7Years + BankcardUtilization + TradesOpenedLast6Months + DebtToIncomeRatio + ProsperPaymentsLessThanOneMonthLate + ProsperPaymentsOneMonthPlusLate + AvailableBankcardCredit + RevolvingCreditBalance, method = "anova")
loan$ProsperScore[is.na(loan$ProsperScore) == TRUE] = round(predict(score_tree,test))
n = which(names(loan) %in% c("CreditScoreRangeLower", "CreditScoreRangeUpper", "StatedMonthlyIncome"))
loan = loan[,-n]
loan$EmploymentStatus = droplevels(loan$EmploymentStatus)
rm(n,score_tree)
# Remove near zero-variance variables
new = loan
var = nearZeroVar(new)
new = new[,-var]
# Create train and test dataset from new dataset
new$ChargedOff = loan$ChargedOff
loan = new
set.seed(2)
index = sample((1:nrow(loan)),size = 0.8*nrow(loan))
train = loan[index,]
test = loan[-index,]
str(loan)
n = which(names(train) == "ChargedOff")
forest = randomForest(x=train[,-n],y = factor(train$ChargedOff),importance = T,ntree=100,mtry=12)
dat = importance(forest,scale=FALSE)
dat = head(dat[order(dat[,3], decreasing = TRUE),c(3,4)],10)
dat
# Clean up loan data to remove and impute NAs
# Replace missing values in Propsper rating alpha with values from credit grade.
# Before 2009, credit grade is used as a rating metric for loans posted on Prosper. Grades include AA, A, B, C, D, E, HR, and NC. Grade "NC" is used for borrowers with no credit history. After 2009, because of lack of interest from investors in "NC" loans, the grades are adjusted to exclude "NC", with the ranges of credit score for grade "HR" and "E" changed to reflect the new grade scale. No changes are made to other grades. Therefore, it is appropriate to combine these credit grades with the grades from the new Prosper rating to create a cohesive rating variable, with the exclusion of grade "NC".
loan = loan[as.character(loan$CreditGrade) != "NC",]
n = which(as.character(loan$CreditGrade) != "")
loan$ProsperRating..Alpha.[n] = loan$CreditGrade[n]
loan = loan[is.na(loan$ProsperRating..Alpha.) == FALSE,]
loan = loan[loan$ProsperRating..Alpha. != "",]
loan$ProsperRating..Alpha. = droplevels(loan$ProsperRating..Alpha.)
n = which(names(loan) == "CreditGrade")
loan = loan[,-n]
# Remove loans with NAs in Borrower APR feature, since there are just a few of these loans.
loan = loan[is.na(loan$BorrowerAPR) == FALSE,]
loan = loan[is.na(loan$TotalCreditLinespast7years) == FALSE,]
loan = loan[is.na(loan$TotalInquiries) == FALSE,]
loan = loan[is.na(loan$DelinquenciesLast7Years) == FALSE,]
loan = loan[is.na(loan$CurrentCreditLines) == FALSE,]
loan = loan[is.na(loan$OpenCreditLines) == FALSE,]
# Combine loans with no employment status to "other" category
loan$EmploymentStatus[as.character(loan$EmploymentStatus) == ""] = "Other"
loan$EmploymentStatus = droplevels(loan$EmploymentStatus)
# Mean impute several numeric variables
meanImpute = function(namelist,loan) {
for (name in namelist) {
n = round(mean(as.numeric(loan[,name]), na.rm = T))
loan[,name][is.na(loan[,name]) == TRUE] = n
}
loan
}
namelist = c("AmountDelinquent", "PublicRecordsLast12Months", "RevolvingCreditBalance", "BankcardUtilization", "AvailableBankcardCredit", "TotalTrades", "TradesNeverDelinquent..percentage.", "TradesOpenedLast6Months", "TotalProsperLoans", "TotalProsperLoans", "ProsperPrincipalBorrowed", "ScorexChangeAtTimeOfListing")
loan = meanImpute(namelist,loan)
# Impute debt-to-income ratio using simple revolving monthly payment/monthly income
n = which(is.na(loan$DebtToIncomeRatio) == TRUE)
loan$DebtToIncomeRatio[n] = loan$OpenRevolvingMonthlyPayment[n]/loan$StatedMonthlyIncome[n]
# Since it doesn't make sense to assess the default risk of borrowers that have no income at all, I will exclude information from these borrowers
loan = loan[loan$StatedMonthlyIncome >= 1,]
loan$IncomeRange = droplevels(loan$IncomeRange)
# Audit income range variable
auditIncomeRange = function(loan){
loan$IncomeRange = as.character(loan$IncomeRange)
condition = loan$IncomeRange == "Not displayed"
yearlyIncome = round(as.numeric(loan$StatedMonthlyIncome[condition])*12)
n = which(yearlyIncome <= 24999)
loan$IncomeRange[condition][n] = "$1-24,999"
n = which((yearlyIncome >= 25000) & (yearlyIncome <= 49999))
loan$IncomeRange[condition][n] = "$25,000-49,999"
n = which((yearlyIncome >= 50000) & (yearlyIncome <= 74999))
loan$IncomeRange[condition][n] = "$50,000-74,999"
n = which((yearlyIncome >= 75000) & (yearlyIncome <= 99999))
loan$IncomeRange[condition][n] = "$75,000-99,999"
n = which(yearlyIncome >= 100000)
loan$IncomeRange[condition][n] = "$100,000+"
loan$IncomeRange = factor(loan$IncomeRange)
}
# In order to cut down the number of samples and to be able to utilize more features in my model, I will only consider loans that have prior history with Prosper.
loan = loan[round(loan$TotalProsperLoans) > 0,]
loan = loan[round(loan$ProsperPrincipalBorrowed) > 0,]
# Any NAs in late payment or Prosper outstanding principal will be replaced with 0. This is because most borrowers on Prosper do not pay late and have no principal outstanding with Prosper.
loan$ProsperPaymentsLessThanOneMonthLate[is.na(loan$ProsperPaymentsLessThanOneMonthLate) == TRUE] = 0
loan$ProsperPaymentsOneMonthPlusLate[is.na(loan$ProsperPaymentsOneMonthPlusLate) == TRUE] = 0
loan$ProsperPrincipalOutstanding[is.na(loan$ProsperPrincipalOutstanding) == TRUE] = 0
# Conduct regression tree to fill in missing Prosper Score, attempt to replicate original Prosper Score assignment model. Source: https://www.prosper.com/help/topics/general-prosper_score/
test = loan[is.na(loan$ProsperScore) == TRUE,]
score_tree = rpart(data=loan,formula = ProsperScore ~ TotalInquiries + DelinquenciesLast7Years + BankcardUtilization + TradesOpenedLast6Months + DebtToIncomeRatio + ProsperPaymentsLessThanOneMonthLate + ProsperPaymentsOneMonthPlusLate + AvailableBankcardCredit + RevolvingCreditBalance, method = "anova")
loan$ProsperScore[is.na(loan$ProsperScore) == TRUE] = round(predict(score_tree,test))
n = which(names(loan) %in% c("CreditScoreRangeLower", "CreditScoreRangeUpper", "StatedMonthlyIncome"))
loan = loan[,-n]
loan$EmploymentStatus = droplevels(loan$EmploymentStatus)
rm(n,score_tree)
# Remove near zero-variance variables
new = loan
var = nearZeroVar(new)
new = new[,-var]
# Create train and test dataset from new dataset
new$ChargedOff = loan$ChargedOff
loan = new
set.seed(2)
index = sample((1:nrow(loan)),size = 0.8*nrow(loan))
train = loan[index,]
test = loan[-index,]
str(loan)
# Load all of the packages that you end up using
# in your analysis in this code chunk.
# Notice that the parameter "echo" was set to FALSE for this code chunk.
# This prevents the code from displaying in the knitted HTML output.
# You should set echo=FALSE for all code chunks in your file.
library(ggplot2)
library(rpart)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
library(dplyr)
library(randomForest)
library(randomForestSRC)
library(e1071)
library(party)
library(caret)
library(ggRandomForests)
library(GGally)
library(scales)
library(memisc)
# Load the Data
loan <- read.csv('D:\\Dropbox\\Udacity Reviews\\Explore and Summarize Data\\datasets\\prosperLoanData.csv')
dim(loan)
str(loan)
# find vector variables, print their names and number of levels
findFactor = function(loan){
for (n in names(loan)){
if (is.factor(loan[[n]]) == TRUE){
print(paste(n,length(levels(loan[[n]])),'levels'))
}
}
}
findFactor(loan)
table(loan$Term)
summary(loan$CurrentCreditLines)
# Create new dummy variable (ChargedOff) to indicate which loans are charged-off and which are not
loan$ChargedOff = 0
loan$ChargedOff[loan$LoanStatus %in% c('Chargedoff','Cancelled','Defaulted')] = 1
# Create Average Credit Score variable
loan$AverageCreditScore = (loan$CreditScoreRangeLower + loan$CreditScoreRangeUpper)/2
qplot(data=loan,x=loan$ChargedOff)
prop.table(table(loan$ChargedOff))
loan_var_name = c("CreditGrade", "Term", "BorrowerAPR", "ProsperRating..Alpha.", "ProsperScore", "ListingCategory..numeric.", "EmploymentStatus", "IsBorrowerHomeowner", "CurrentCreditLines", "OpenCreditLines", "TotalCreditLinespast7years", "OpenRevolvingAccounts", "OpenRevolvingMonthlyPayment","InquiriesLast6Months", "TotalInquiries", "CurrentDelinquencies", "AmountDelinquent", "DelinquenciesLast7Years", "PublicRecordsLast10Years","PublicRecordsLast12Months", "RevolvingCreditBalance","BankcardUtilization", "AvailableBankcardCredit","TotalTrades", "TradesNeverDelinquent..percentage.","TradesOpenedLast6Months", "DebtToIncomeRatio", "IncomeRange", "IncomeVerifiable", "TotalProsperLoans", "ProsperPrincipalBorrowed", "ScorexChangeAtTimeOfListing", "Recommendations", "InvestmentFromFriendsCount","InvestmentFromFriendsAmount","Investors","ChargedOff", "AverageCreditScore","CreditScoreRangeLower","CreditScoreRangeUpper","StatedMonthlyIncome", "ProsperPaymentsLessThanOneMonthLate", "ProsperPaymentsOneMonthPlusLate", "ProsperPrincipalOutstanding")
loan = loan[,loan_var_name]
rm(loan_var_name)
# Clean up loan data to remove and impute NAs
# Replace missing values in Propsper rating alpha with values from credit grade.
# Before 2009, credit grade is used as a rating metric for loans posted on Prosper. Grades include AA, A, B, C, D, E, HR, and NC. Grade "NC" is used for borrowers with no credit history. After 2009, because of lack of interest from investors in "NC" loans, the grades are adjusted to exclude "NC", with the ranges of credit score for grade "HR" and "E" changed to reflect the new grade scale. No changes are made to other grades. Therefore, it is appropriate to combine these credit grades with the grades from the new Prosper rating to create a cohesive rating variable, with the exclusion of grade "NC".
loan = loan[as.character(loan$CreditGrade) != "NC",]
n = which(as.character(loan$CreditGrade) != "")
loan$ProsperRating..Alpha.[n] = loan$CreditGrade[n]
loan = loan[is.na(loan$ProsperRating..Alpha.) == FALSE,]
loan = loan[loan$ProsperRating..Alpha. != "",]
loan$ProsperRating..Alpha. = droplevels(loan$ProsperRating..Alpha.)
n = which(names(loan) == "CreditGrade")
loan = loan[,-n]
# Remove loans with NAs in Borrower APR feature, since there are just a few of these loans.
loan = loan[is.na(loan$BorrowerAPR) == FALSE,]
loan = loan[is.na(loan$TotalCreditLinespast7years) == FALSE,]
loan = loan[is.na(loan$TotalInquiries) == FALSE,]
loan = loan[is.na(loan$DelinquenciesLast7Years) == FALSE,]
loan = loan[is.na(loan$CurrentCreditLines) == FALSE,]
loan = loan[is.na(loan$OpenCreditLines) == FALSE,]
# Combine loans with no employment status to "other" category
loan$EmploymentStatus[as.character(loan$EmploymentStatus) == ""] = "Other"
loan$EmploymentStatus = droplevels(loan$EmploymentStatus)
# Mean impute several numeric variables
meanImpute = function(namelist,loan) {
for (name in namelist) {
n = round(mean(as.numeric(loan[,name]), na.rm = T))
loan[,name][is.na(loan[,name]) == TRUE] = n
}
loan
}
namelist = c("AmountDelinquent", "PublicRecordsLast12Months", "RevolvingCreditBalance", "BankcardUtilization", "AvailableBankcardCredit", "TotalTrades", "TradesNeverDelinquent..percentage.", "TradesOpenedLast6Months", "TotalProsperLoans", "TotalProsperLoans", "ProsperPrincipalBorrowed", "ScorexChangeAtTimeOfListing")
loan = meanImpute(namelist,loan)
# Impute debt-to-income ratio using simple revolving monthly payment/monthly income
n = which(is.na(loan$DebtToIncomeRatio) == TRUE)
loan$DebtToIncomeRatio[n] = loan$OpenRevolvingMonthlyPayment[n]/loan$StatedMonthlyIncome[n]
# Since it doesn't make sense to assess the default risk of borrowers that have no income at all, I will exclude information from these borrowers
loan = loan[loan$StatedMonthlyIncome >= 1,]
loan$IncomeRange = droplevels(loan$IncomeRange)
# Audit income range variable
auditIncomeRange = function(loan){
loan$IncomeRange = as.character(loan$IncomeRange)
condition = loan$IncomeRange == "Not displayed"
yearlyIncome = round(as.numeric(loan$StatedMonthlyIncome[condition])*12)
n = which(yearlyIncome <= 24999)
loan$IncomeRange[condition][n] = "$1-24,999"
n = which((yearlyIncome >= 25000) & (yearlyIncome <= 49999))
loan$IncomeRange[condition][n] = "$25,000-49,999"
n = which((yearlyIncome >= 50000) & (yearlyIncome <= 74999))
loan$IncomeRange[condition][n] = "$50,000-74,999"
n = which((yearlyIncome >= 75000) & (yearlyIncome <= 99999))
loan$IncomeRange[condition][n] = "$75,000-99,999"
n = which(yearlyIncome >= 100000)
loan$IncomeRange[condition][n] = "$100,000+"
loan$IncomeRange = factor(loan$IncomeRange)
}
# In order to cut down the number of samples and to be able to utilize more features in my model, I will only consider loans that have prior history with Prosper.
loan = loan[round(loan$TotalProsperLoans) > 0,]
loan = loan[round(loan$ProsperPrincipalBorrowed) > 0,]
# Any NAs in late payment or Prosper outstanding principal will be replaced with 0. This is because most borrowers on Prosper do not pay late and have no principal outstanding with Prosper.
loan$ProsperPaymentsLessThanOneMonthLate[is.na(loan$ProsperPaymentsLessThanOneMonthLate) == TRUE] = 0
loan$ProsperPaymentsOneMonthPlusLate[is.na(loan$ProsperPaymentsOneMonthPlusLate) == TRUE] = 0
loan$ProsperPrincipalOutstanding[is.na(loan$ProsperPrincipalOutstanding) == TRUE] = 0
# Conduct regression tree to fill in missing Prosper Score, attempt to replicate original Prosper Score assignment model. Source: https://www.prosper.com/help/topics/general-prosper_score/
test = loan[is.na(loan$ProsperScore) == TRUE,]
score_tree = rpart(data=loan,formula = ProsperScore ~ TotalInquiries + DelinquenciesLast7Years + BankcardUtilization + TradesOpenedLast6Months + DebtToIncomeRatio + ProsperPaymentsLessThanOneMonthLate + ProsperPaymentsOneMonthPlusLate + AvailableBankcardCredit + RevolvingCreditBalance, method = "anova")
loan$ProsperScore[is.na(loan$ProsperScore) == TRUE] = round(predict(score_tree,test))
n = which(names(loan) %in% c("CreditScoreRangeLower", "CreditScoreRangeUpper", "StatedMonthlyIncome"))
loan = loan[,-n]
loan$EmploymentStatus = droplevels(loan$EmploymentStatus)
rm(n,score_tree)
# Remove near zero-variance variables
new = loan
var = nearZeroVar(new)
new = new[,-var]
# Create train and test dataset from new dataset
new$ChargedOff = loan$ChargedOff
loan = new
set.seed(2)
index = sample((1:nrow(loan)),size = 0.8*nrow(loan))
train = loan[index,]
test = loan[-index,]
str(loan)
n = which(names(train) == "ChargedOff")
forest = randomForest(x=train[,-n],y = factor(train$ChargedOff),importance = T,ntree=100,mtry=12)
dat = importance(forest,scale=FALSE)
dat = head(dat[order(dat[,3], decreasing = TRUE),c(3,4)],10)
dat
summary(loan$BorrowerAPR)
ggplot(loan) + geom_histogram(aes(x=BorrowerAPR, fill = as.factor(ChargedOff)),binwidth = 0.005)+ scale_x_continuous(breaks = seq(0,0.5,0.05)) + ggtitle("Borrower APR distribution")
ggplot(loan) + geom_histogram(aes(x=BorrowerAPR),binwidth = 0.005)+ scale_x_continuous(breaks = seq(0,0.5,0.05)) + ggtitle("Borrower APR distribution")
summary(loan$BorrowerAPR)
ggplot(loan) + geom_histogram(aes(x=BorrowerAPR, fill = as.factor(ChargedOff)),binwidth = 0.001)+ scale_x_continuous(breaks = seq(0,0.5,0.05)) + ggtitle("Borrower APR distribution")
summary(loan$BorrowerAPR)
ggplot(loan) + geom_histogram(aes(x=BorrowerAPR, fill = as.factor(ChargedOff)),binwidth = 0.01)+ scale_x_continuous(breaks = seq(0,0.5,0.05)) + ggtitle("Borrower APR distribution")
summary(loan$BorrowerAPR)
ggplot(loan) + geom_histogram(aes(x=BorrowerAPR, fill = as.factor(ChargedOff)),binwidth = 0.1)+ scale_x_continuous(breaks = seq(0,0.5,0.05)) + ggtitle("Borrower APR distribution")
summary(loan$BorrowerAPR)
ggplot(loan) + geom_histogram(aes(x=BorrowerAPR, fill = as.factor(ChargedOff)),binwidth = 0.05)+ scale_x_continuous(breaks = seq(0,0.5,0.05)) + ggtitle("Borrower APR distribution")
summary(loan$BorrowerAPR)
ggplot(loan) + geom_histogram(aes(x=BorrowerAPR, fill = as.factor(ChargedOff)),binwidth = 0.001)+ scale_x_continuous(breaks = seq(0,0.5,0.05)) + ggtitle("Borrower APR distribution")
summary(loan$BorrowerAPR)
ggplot(loan) + geom_histogram(aes(x=BorrowerAPR, fill = as.factor(ChargedOff)),binwidth = 0.005)+ scale_x_continuous(breaks = seq(0,0.5,0.05)) + ggtitle("Borrower APR distribution")
summary(loan$BorrowerAPR)
ggplot(loan) + geom_histogram(aes(x=BorrowerAPR, fill = as.factor(ChargedOff)),binwidth = 0.001)+ scale_x_continuous(breaks = seq(0,0.5,0.05)) + ggtitle("Borrower APR distribution")
summary(loan$BorrowerAPR)
ggplot(loan) + geom_histogram(aes(x=BorrowerAPR, fill = as.factor(ChargedOff)),binwidth = 0.005)+ scale_x_continuous(breaks = seq(0,0.5,0.05)) + ggtitle("Borrower APR distribution")
summary(loan$BankcardUtilization)
ggplot(loan) + geom_histogram(aes(x=BankcardUtilization,fill = as.factor(ChargedOff))) + scale_x_sqrt() + ggtitle("Bank card utilization distribution")
nrow(loan[loan$BankcardUtilization > 1,])
new = loan[, c("ChargedOff", "BorrowerAPR" ,"EmploymentStatus", "TotalInquiries", "OpenRevolvingMonthlyPayment","DebtToIncomeRatio" ,"AvailableBankcardCredit","BankcardUtilization","AverageCreditScore","RevolvingCreditBalance")]
new$ChargedOff = as.factor(new$ChargedOff)
new = new[sample((1:nrow(new)),10000),]
ggpairs(new, params = c(shape = I('.'), outlier.shape = I('.'),  corSize=2), columnLabels = c("Charged Off", "APR", "E Status", "Inquiries", "Monthly Pmt", "Debt-income", "A. Bank card Cr", "Card Use", "Cr. Score", "Cr. Balance"), axisLabels = "internal")
pair <- data.frame(
ChargedOff = loan$ChargedOff,
BorrowerAPR = loan$BorrowerAPR,
EmploymentStatus = loan$EmploymentStatus,
TotalInquiries = loan$TotalInquiries,
OpenRevolvingMonthlyPayment = loan$OpenRevolvingMonthlyPayment,
DebtToIncomeRatio = loan$DebtToIncomeRatio,
AvailableBankcardCredit = loan$AvailableBankcardCredit,
BankcardUtilization = loan$BankcardUtilization
)
ggpairs(pair,
params = c(Shape = I("."), outlier.shape = I("."))) +
theme(legend.position = "none",
panel.grid.major = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank())
knitr::opts_chunk$set(echo=FALSE, warning=FALSE, message=FALSE, cache=TRUE, cache.path = 'cache/', fig.path='figure/')
# devtools::install_github("hadley/assertthat")
# devtools::install_github("rstats-db/bigrquery")
library(bigrquery)
library(curl)
library(corrplot)
library(Cairo)
library(ggplot2)
# devtools::install_github("hadley/assertthat")
# devtools::install_github("rstats-db/bigrquery")
library(bigrquery)
library(curl)
library(corrplot)
library(Cairo)
library(ggplot2)
install.packages(bigquery)
devtools::install_github("rstats-db/bigrquery")
install.packages(devtools, curl, corrplot, Cairo)
install.packages(c(devtools, curl, corrplot, Cairo))
install.packages(c('devtools', 'curl', 'corrplot', 'Cairo'))
devtools::install_github("hadley/assertthat")
devtools::install_github("rstats-db/bigrquery")
# install.packages(c('devtools', 'curl', 'corrplot', 'Cairo'))
# devtools::install_github("hadley/assertthat")
# devtools::install_github("rstats-db/bigrquery")
library(bigrquery)
library(curl)
library(corrplot)
library(Cairo)
library(ggplot2)
setwd("C:\\Dropbox\\Projects\\kaggle\\datalab-projects\\Xiaojukeji Algorithm Competition\\R")
filename <- "xjk_algo_comp.gaps.Rda"
if (file.exists(filename)) {
load(filename)
} else {
project <- "datalab-projects-1331" # put your projectID here
sql <- 'SELECT * FROM[datalab-projects-1331:xjk_algo_comp.gaps];'
data <- query_exec(sql, project=project, max_pages=Inf)
save(data,file=filename)
}
data[is.na(data)] <- 0
# install.packages(c('devtools', 'curl', 'corrplot', 'Cairo'))
# devtools::install_github("hadley/assertthat")
# devtools::install_github("rstats-db/bigrquery")
library(bigrquery)
library(curl)
library(corrplot)
library(Cairo)
library(ggplot2)
knitr::opts_chunk$set(echo=FALSE, warning=FALSE, message=FALSE, cache=TRUE, cache.path = 'cache/', fig.path='figure/')
setwd("C:\\Dropbox\\Projects\\kaggle\\datalab-projects\\Xiaojukeji Algorithm Competition\\R")
filename <- "xjk_algo_comp.gaps.Rda"
if (file.exists(filename)) {
load(filename)
} else {
project <- "datalab-projects-1331" # put your projectID here
sql <- 'SELECT * FROM[datalab-projects-1331:xjk_algo_comp.gaps];'
data <- query_exec(sql, project=project, max_pages=Inf)
save(data,file=filename)
}
data[is.na(data)] <- 0
load(filename)
project <- "datalab-projects-1331" # put your projectID here
sql <- 'SELECT * FROM[datalab-projects-1331:xjk_algo_comp.gaps];'
data <- query_exec(sql, project=project, max_pages=Inf)
devtools::install_github("rstats-db/bigrquery")
library(bigrquery)
devtools::install_github("rstats-db/bigrquery")
library(bigrquery)
devtools::install_github("rstats-db/bigrquery")
install.packages(tibble)
install.packages('tibble')
devtools::install_github("rstats-db/bigrquery")
devtools::install_github("hadley/assertthat")
# install.packages(c('devtools', 'curl', 'corrplot', 'Cairo', 'tibble'))
# devtools::install_github("hadley/assertthat")
# devtools::install_github("rstats-db/bigrquery")
library(bigrquery)
library(curl)
library(corrplot)
library(Cairo)
library(ggplot2)
setwd("C:\\Dropbox\\Projects\\kaggle\\datalab-projects\\Xiaojukeji Algorithm Competition\\R")
filename <- "xjk_algo_comp.gaps.Rda"
if (file.exists(filename)) {
load(filename)
} else {
project <- "datalab-projects-1331" # put your projectID here
sql <- 'SELECT * FROM[datalab-projects-1331:xjk_algo_comp.gaps];'
data <- query_exec(sql, project=project, max_pages=Inf)
save(data,file=filename)
}
data1 <- data[ , !names(data) %in% c("timeslot", "district_id")]
cors <- cor(data1)
corrplot(cors, method="color", order="hclust", tl.cex = 0.8)
View(data)
View(data1)
View(cors)
View(cors)
View(data)
View(data1)
cors <- cor(data1, use="complete")
View(cors)
corrplot(cors, method="color", order="hclust", tl.cex = 0.8)
View(cors)
cors$gap
cors
View(data1)
View(cors)
corrplot(cors[1:164,164, drop=FALSE], cl.pos='n')
corrplot(cors[1:164,164, drop=FALSE], method="color", order="hclust", tl.cex = 0.8)
corrplot(cors[1:164,164, drop=FALSE], method="color", order="hclust", tl.cex = 0.8, cl.pos='n')
corrplot(cors[1:164,164, drop=FALSE], method="color",  tl.cex = 0.8, cl.pos='n')
corrplot(cors[1:164,164, drop=FALSE], method="color", tl.cex = 0.8, cl.pos='n')
corrplot(cors[1:163,164, drop=FALSE], method="color", cl.pos='n')
corrplot(cors[1:163,164, drop=FALSE], method="color", tl.cex = 0.5, cl.pos='n')
corrplot(cors[1:163,164, drop=FALSE], method="color", tl.cex = 0.4, cl.pos='n')
corrplot(cors[1:163,164, drop=FALSE], method="color", tl.cex = 0.5, cl.pos='n')
ggplot(aes(y=gap, x=gap_1_slots_ago), data=data) +
geom_boxplot() +
scale_y_log10()
ggplot(aes(y=gap, x=gap_1_slots_ago), data=data) +
geom_scatter() +
scale_y_log10()
ggplot(aes(y=gap, x=gap_1_slots_ago), data=data) +
geom_jitter(alpha=0.4) +
scale_y_log10()
ggplot(aes(y=gap, x=gap_1_slots_ago), data=data) +
geom_jitter(alpha=0.4)
ggplot(aes(y=gap, x=gap_2_slots_ago), data=data) +
geom_jitter(alpha=0.4)
ggplot(aes(y=gap, x=gap_3_slots_ago), data=data) +
geom_jitter(alpha=0.4)
scale_x_log10()
ggplot(aes(y=gap, x=gap_3_slots_ago), data=data) +
geom_jitter(alpha=0.4) +
scale_x_log10()
ggplot(aes(y=gap, x=gap_3_slots_ago), data=data) +
geom_jitter(alpha=0.4) +
scale_x_log10() +
scale_y_log10()
ggplot(aes(y=gap, x=sum_price_1_slots_ago), data=data) +
geom_jitter(alpha=0.4)
ggplot(aes(y=gap, x=sum_price_2_slots_ago), data=data) +
geom_jitter(alpha=0.4)
ggplot(aes(y=gap, x=sum_price_3_slots_ago), data=data) +
geom_jitter(alpha=0.4)
ggplot(aes(y=gap, x=sum_price_3_slots_ago), data=data) +
geom_jitter(alpha=0.4) +
scale_x_log10()
ggplot(aes(y=gap, x=sum_price_3_slots_ago), data=data) +
geom_jitter(alpha=0.4) +
geom_smooth()
ggplot(aes(y=gap, x=sum_price_1_slots_ago), data=data) +
geom_jitter(alpha=0.4) +
geom_smooth()
